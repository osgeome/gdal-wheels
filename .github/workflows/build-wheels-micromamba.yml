name: Build GDAL Wheels with Micromamba

on:
  push:
    branches:
      - main
    tags:
      - 'v*'
  pull_request:
    branches:
      - main
  workflow_dispatch:
    inputs:
      python_version:
        description: 'Python version to build for (default: 3.11)'
        required: false
        default: '3.11'
        type: string
      gdal_version:
        description: 'GDAL version to build (default: latest released)'
        required: false
        default: 'v3.10.2'
        type: string

env:
  GDAL_VERSION: ${{ github.event.inputs.gdal_version || 'v3.10.2' }}
  MICROMAMBA_ENV_NAME: gdal-build

jobs:
  build_wheels:
    name: Build wheels for Python ${{ github.event.inputs.python_version || '3.11' }}
    runs-on: windows-latest
    timeout-minutes: 60

    steps:
      - name: Checkout wheels repository
        uses: actions/checkout@v4
        with:
          path: gdal-wheels

      - name: Configure Git for long paths on Windows
        run: |
          git config --system core.longpaths true

      - name: Checkout GDAL source
        uses: actions/checkout@v4
        with:
          repository: OSGeo/gdal
          ref: ${{ env.GDAL_VERSION }}
          path: gdal-source
          fetch-depth: 0
          submodules: recursive

      - name: Setup Micromamba
        uses: mamba-org/setup-micromamba@v2
        with:
          environment-file: gdal-wheels/environment.yml
          environment-name: ${{ env.MICROMAMBA_ENV_NAME }}
          create-args: >-
            python=${{ github.event.inputs.python_version || '3.11' }}
          init-shell: >-
            bash
            powershell
          cache-environment: true
          post-cleanup: 'all'
          log-level: info

      - name: Determine CIBW_BUILD
        id: cibw-build
        shell: bash
        run: |
          PYTHON_VERSION="${{ github.event.inputs.python_version || '3.11' }}"
          if [ "$PYTHON_VERSION" == "3.9" ]; then
            echo "cibw_build=cp39-win_amd64" >> $GITHUB_OUTPUT
          elif [ "$PYTHON_VERSION" == "3.10" ]; then
            echo "cibw_build=cp310-win_amd64" >> $GITHUB_OUTPUT
          elif [ "$PYTHON_VERSION" == "3.11" ]; then
            echo "cibw_build=cp311-win_amd64" >> $GITHUB_OUTPUT
          elif [ "$PYTHON_VERSION" == "3.12" ]; then
            echo "cibw_build=cp312-win_amd64" >> $GITHUB_OUTPUT
          else
            echo "cibw_build=cp311-win_amd64" >> $GITHUB_OUTPUT
          fi

      - name: Remove conflicting libraries (Windows)
        if: runner.os == 'Windows'
        shell: bash -l {0}
        run: |
          rm -rf C:/Strawberry || /bin/true

      - name: Set up Visual Studio environment (Windows)
        if: runner.os == 'Windows'
        shell: cmd
        run: |
          call "C:\Program Files\Microsoft Visual Studio\2022\Enterprise\Common7\Tools\VsDevCmd.bat" -arch=amd64
          echo PATH=%PATH%>> %GITHUB_ENV%
          echo INCLUDE=%INCLUDE%>> %GITHUB_ENV%
          echo LIB=%LIB%>> %GITHUB_ENV%
          echo LIBPATH=%LIBPATH%>> %GITHUB_ENV%

      - name: Build GDAL from source
        shell: bash -l {0}
        run: |
          # Activate micromamba environment
          eval "$(micromamba shell hook --shell=bash)"
          micromamba activate ${{ env.MICROMAMBA_ENV_NAME }}
          
          # Print environment information
          echo "Python version: $(python --version)"
          echo "MAMBA_ROOT_PREFIX: $MAMBA_ROOT_PREFIX"
          
          # Build GDAL from source
          cd gdal-source
          mkdir build && cd build
          
          # Configure GDAL build
          if [[ "$OSTYPE" == "msys" || "$OSTYPE" == "win32" ]]; then
            # Windows-specific CMake configuration
            cmake .. \
              -G "Visual Studio 17 2022" -A x64 \
              -DCMAKE_INSTALL_PREFIX=$MAMBA_ROOT_PREFIX/envs/${{ env.MICROMAMBA_ENV_NAME }} \
              -DCMAKE_BUILD_TYPE=Release \
              -DBUILD_SHARED_LIBS=ON \
              -DBUILD_PYTHON_BINDINGS=OFF \
              -DGDAL_USE_JPEG=ON \
              -DGDAL_USE_PNG=ON \
              -DGDAL_USE_ZLIB=ON \
              -DGDAL_USE_CURL=ON \
              -DGDAL_USE_CRYPTO=ON \
              -DGDAL_USE_OPENSSL=ON \
              -DGDAL_USE_ZLIB_INTERNAL=ON \
              -DCMAKE_C_FLAGS="/WX /MP" \
              -DCMAKE_CXX_FLAGS="/WX /MP" \
              -DCMAKE_PREFIX_PATH="${CONDA_PREFIX}/Library"
          else
            # Unix-specific CMake configuration
            cmake .. \
              -DCMAKE_INSTALL_PREFIX=$MAMBA_ROOT_PREFIX/envs/${{ env.MICROMAMBA_ENV_NAME }} \
              -DCMAKE_BUILD_TYPE=Release \
              -DBUILD_SHARED_LIBS=ON \
              -DBUILD_PYTHON_BINDINGS=OFF \
              -DGDAL_USE_JPEG=ON \
              -DGDAL_USE_PNG=ON \
              -DGDAL_USE_ZLIB=ON \
              -DGDAL_USE_CURL=ON \
              -DGDAL_USE_CRYPTO=ON \
              -DGDAL_USE_OPENSSL=ON
          fi
          
          # Build and install GDAL
          cmake --build . --config Release --parallel 4
          cmake --install .
          
          # Return to the root directory
          cd ../..

      - name: Build wheels
        shell: bash -l {0}
        env:
          CIBW_BUILD: ${{ steps.cibw-build.outputs.cibw_build }}
          CIBW_ARCHS: auto64
          CIBW_BUILD_VERBOSITY: 1
          CIBW_BEFORE_BUILD: "pip install numpy"
        working-directory: gdal-source/swig/python
        run: |
          # Activate micromamba environment
          eval "$(micromamba shell hook --shell=bash)"
          micromamba activate ${{ env.MICROMAMBA_ENV_NAME }}
          
          # Print environment information
          echo "Python version: $(python --version)"
          echo "MAMBA_ROOT_PREFIX: $MAMBA_ROOT_PREFIX"
          
          # Set up environment paths
          CONDA_PREFIX="${CONDA_PREFIX:-$MAMBA_ROOT_PREFIX/envs/${{ env.MICROMAMBA_ENV_NAME }}}"
          
          # Set environment variables for GDAL
          if [[ "$OSTYPE" == "msys" || "$OSTYPE" == "win32" ]]; then
            # Windows paths
            export GDAL_HOME="${CONDA_PREFIX}"
            export CMAKE_PREFIX_PATH="${CONDA_PREFIX}/Library"
            export GDAL_LIB="${CONDA_PREFIX}/Library/lib"
            export GDAL_INCLUDE="${CONDA_PREFIX}/Library/include"
            export GDAL_BIN="${CONDA_PREFIX}/Library/bin"
            export GDAL_SHARE="${CONDA_PREFIX}/Library/share/gdal"
            export PROJ_SHARE="${CONDA_PREFIX}/Library/share/proj"
            export GDAL_PLUGINS="${CONDA_PREFIX}/Library/lib/gdalplugins"
            
            # Set OpenSSL paths for Windows
            export OPENSSL_ROOT_DIR="${CONDA_PREFIX}/Library"
            export OPENSSL_INCLUDE_DIR="${CONDA_PREFIX}/Library/include"
            export OPENSSL_LIBRARIES="${CONDA_PREFIX}/Library/lib"
            
            # Add important directories to PATH
            export PATH="${CONDA_PREFIX}/Library/bin:${GDAL_BIN}:${OPENSSL_ROOT_DIR}/bin:$PATH"
            
            # Set additional Windows-specific environment variables
            export VS_VERSION="Visual Studio 17 2022"
            export ARCHITECTURE="amd64"
            export CMAKE_ARCHITECTURE="x64"
          else
            # Unix paths
            export GDAL_HOME="${CONDA_PREFIX}"
            export CMAKE_PREFIX_PATH="${CONDA_PREFIX}"
            export GDAL_LIB="${CONDA_PREFIX}/lib"
            export GDAL_INCLUDE="${CONDA_PREFIX}/include"
            export GDAL_BIN="${CONDA_PREFIX}/bin"
            export GDAL_SHARE="${CONDA_PREFIX}/share/gdal"
            export PROJ_SHARE="${CONDA_PREFIX}/share/proj"
            export GDAL_PLUGINS="${CONDA_PREFIX}/lib/gdalplugins"
            
            # Set OpenSSL paths for Unix
            export OPENSSL_ROOT_DIR="${CONDA_PREFIX}"
            export OPENSSL_INCLUDE_DIR="${CONDA_PREFIX}/include"
            export OPENSSL_LIBRARIES="${CONDA_PREFIX}/lib"
          fi
          
          echo "Using CONDA_PREFIX: ${CONDA_PREFIX}"
          echo "Using GDAL_LIB: ${GDAL_LIB}"
          echo "Using GDAL_INCLUDE: ${GDAL_INCLUDE}"
          echo "Using GDAL_BIN: ${GDAL_BIN}"
          echo "Using GDAL_SHARE: ${GDAL_SHARE}"
          echo "Using PROJ_SHARE: ${PROJ_SHARE}"
          echo "Using GDAL_PLUGINS: ${GDAL_PLUGINS}"
          
          # Install build dependencies
          python -m pip install --upgrade pip
          python -m pip install --upgrade cibuildwheel numpy
          
          # Check if GDAL source exists, if not clone it
          if [ ! -d "../../" ]; then
            echo "GDAL source not found. Cloning GDAL repository..."
            cd ../..
            git clone --depth 1 --branch ${{ env.GDAL_VERSION }} https://github.com/OSGeo/gdal.git
            cd swig/python
          fi
          
          # Create a build directory for GDAL Python bindings
          mkdir -p build_ext
          cd build_ext
          
          # Create a pyproject.toml file with explicit numpy dependency
          cat > pyproject.toml << 'EOF'
          [build-system]
          requires = ["setuptools>=67.0.0", "wheel", "numpy>=2.0.0"]
          build-backend = "setuptools.build_meta"
          
          [project]
          name = "GDAL"
          version = "3.10.2"
          description = "GDAL: Geospatial Data Abstraction Library"
          readme = "README.rst"
          authors = [
              {name = "Frank Warmerdam"},
              {name = "Howard Butler"},
              {name = "Even Rouault"},
          ]
          maintainers = [
              {name = "GDAL contributors", email = "gdal-dev@lists.osgeo.org"},
          ]
          keywords = ["gis", "raster", "vector"]
          license = {text = "MIT"}
          classifiers = [
              "Development Status :: 5 - Production/Stable",
              "Intended Audience :: Developers",
              "Intended Audience :: Science/Research",
              "License :: OSI Approved :: MIT License",
              "Operating System :: OS Independent",
              "Programming Language :: Python :: 3",
              "Programming Language :: C",
              "Programming Language :: C++",
              "Topic :: Scientific/Engineering :: GIS",
              "Topic :: Scientific/Engineering :: Information Analysis",
          ]
          requires-python = ">=3.8"
          EOF
          
          # Create a README.rst file (required by GDAL's pyproject.toml)
          cat > README.rst << 'EOF'
          GDAL: Geospatial Data Abstraction Library
          =========================================
          
          GDAL is a translator library for raster and vector geospatial data formats.
          As a library, it presents a single raster abstract data model and single vector
          abstract data model to the calling application for all supported formats.
          
          Complete documentation is available at https://gdal.org/
          EOF
          
          # Create a custom setup.py file that properly links to the GDAL libraries
          cat > setup.py << 'EOF'
          from setuptools import setup, Extension
          from setuptools.command.build_ext import build_ext
          import os
          import sys
          import numpy
          
          # Get environment variables
          gdal_include_path = os.environ.get('GDAL_INCLUDE_PATH', '')
          gdal_library_path = os.environ.get('GDAL_LIBRARY_PATH', '')
          openssl_include_dir = os.environ.get('OPENSSL_INCLUDE_DIR', '')
          openssl_libraries = os.environ.get('OPENSSL_LIBRARIES', '')
          
          # Additional libraries to link against
          libraries = ['gdal']
          
          # Platform-specific configurations
          extra_compile_args = []
          extra_link_args = []
          
          if sys.platform == 'win32':
              # Windows-specific settings
              libraries.extend(['libcrypto', 'libssl'])
              
              # Add additional Windows libraries that might be needed
              libraries.extend(['ws2_32', 'crypt32', 'user32', 'gdi32', 'winspool', 'shell32', 'ole32', 'oleaut32', 'uuid', 'comdlg32', 'advapi32'])
              
              # Visual Studio compiler flags
              extra_compile_args = ['/EHsc', '/bigobj', '/MP']
              
              # Add runtime library flags to match the Python build
              import struct
              if struct.calcsize("P") * 8 == 64:
                  extra_compile_args.append('/D_WIN64')
          else:
              # Unix-specific settings
              libraries.extend(['crypto', 'ssl'])
              extra_compile_args = ['-std=c++11']
          
          # Define the extensions to build
          gdal_module = Extension(
              name='osgeo._gdal',
              sources=['gdal_wrap.cpp'],
              include_dirs=[gdal_include_path, openssl_include_dir, numpy.get_include()],
              library_dirs=[gdal_library_path, openssl_libraries],
              libraries=libraries,
              extra_compile_args=extra_compile_args,
              extra_link_args=extra_link_args,
          )
          
          gdalconst_module = Extension(
              name='osgeo._gdalconst',
              sources=['gdalconst_wrap.c'],
              include_dirs=[gdal_include_path, openssl_include_dir, numpy.get_include()],
              library_dirs=[gdal_library_path, openssl_libraries],
              libraries=libraries,
              extra_compile_args=extra_compile_args,
              extra_link_args=extra_link_args,
          )
          
          ogr_module = Extension(
              name='osgeo._ogr',
              sources=['ogr_wrap.cpp'],
              include_dirs=[gdal_include_path, openssl_include_dir, numpy.get_include()],
              library_dirs=[gdal_library_path, openssl_libraries],
              libraries=libraries,
              extra_compile_args=extra_compile_args,
              extra_link_args=extra_link_args,
          )
          
          osr_module = Extension(
              name='osgeo._osr',
              sources=['osr_wrap.cpp'],
              include_dirs=[gdal_include_path, openssl_include_dir, numpy.get_include()],
              library_dirs=[gdal_library_path, openssl_libraries],
              libraries=libraries,
              extra_compile_args=extra_compile_args,
              extra_link_args=extra_link_args,
          )
          
          gnm_module = Extension(
              name='osgeo._gnm',
              sources=['gnm_wrap.cpp'],
              include_dirs=[gdal_include_path, openssl_include_dir, numpy.get_include()],
              library_dirs=[gdal_library_path, openssl_libraries],
              libraries=libraries,
              extra_compile_args=extra_compile_args,
              extra_link_args=extra_link_args,
          )
          
          setup(
              name='GDAL',
              version='3.10.2',
              description='GDAL: Geospatial Data Abstraction Library',
              author='Frank Warmerdam, Howard Butler, Even Rouault',
              author_email='gdal-dev@lists.osgeo.org',
              url='https://gdal.org',
              packages=['osgeo'],
              ext_modules=[
                  gdal_module,
                  gdalconst_module,
                  ogr_module,
                  osr_module,
                  gnm_module
              ],
          )
          EOF
          
          # Copy the SWIG-generated wrapper files from the GDAL source
          if [ -d "../../extensions" ]; then
            cp -v ../../extensions/*.cpp .
            cp -v ../../extensions/*.c .
          else
            echo "SWIG-generated wrapper files not found. Creating minimal wrapper files."
            
            # Create minimal wrapper files for each module
            for module in gdal ogr osr gnm; do
              cat > ${module}_wrap.cpp << EOF
          #include <Python.h>
          
          static PyMethodDef ${module}_methods[] = {
              {NULL, NULL, 0, NULL}
          };
          
          static struct PyModuleDef ${module}moduledef = {
              PyModuleDef_HEAD_INIT,
              "_${module}",
              NULL,
              -1,
              ${module}_methods,
          };
          
          PyMODINIT_FUNC PyInit__${module}(void) {
              return PyModule_Create(&${module}moduledef);
          }
          EOF
            done
            
            # Create gdalconst_wrap.c
            cat > gdalconst_wrap.c << EOF
          #include <Python.h>
          
          static PyMethodDef gdalconst_methods[] = {
              {NULL, NULL, 0, NULL}
          };
          
          static struct PyModuleDef gdalconstmoduledef = {
              PyModuleDef_HEAD_INIT,
              "_gdalconst",
              NULL,
              -1,
              gdalconst_methods,
          };
          
          PyMODINIT_FUNC PyInit__gdalconst(void) {
              return PyModule_Create(&gdalconstmoduledef);
          }
          EOF
          fi
          
          # Copy the Python modules
          mkdir -p osgeo
          
          # Check if the GDAL Python files exist
          if [ -d "../../osgeo" ]; then
            cp -v ../../osgeo/*.py osgeo/
          else
            # Create minimal Python files if they don't exist
            cat > osgeo/__init__.py << 'EOF'
          # __init__ for osgeo package.
          
          from .gdal import *
          from .gdalconst import *
          from .ogr import *
          from .osr import *
          from .gnm import *
          
          __version__ = '3.10.2'
          EOF
            
            # Create minimal Python modules
            for module in gdal gdalconst ogr osr gnm; do
              cat > osgeo/${module}.py << EOF
          # Import the extension module
          from . import _${module}
          
          # Import all the functions and constants from the extension module
          from ._${module} import *
          EOF
            done
          fi
          
          # Set environment variables to ensure platform wheels are built
          export GDAL_HOME="${CONDA_PREFIX}"
          export CMAKE_PREFIX_PATH="${CONDA_PREFIX}"
          export GDAL_LIBRARY_PATH="${GDAL_LIB}"
          export GDAL_INCLUDE_PATH="${GDAL_INCLUDE}"
          export GDAL_DATA="${GDAL_SHARE}"
          export PROJ_LIB="${PROJ_SHARE}"
          export GDAL_DRIVER_PATH="${GDAL_PLUGINS}"
          
          # Set OpenSSL paths for Windows
          if [[ "$OSTYPE" == "msys" || "$OSTYPE" == "win32" ]]; then
            export OPENSSL_ROOT_DIR="${CONDA_PREFIX}/Library"
            export OPENSSL_INCLUDE_DIR="${CONDA_PREFIX}/Library/include"
            export OPENSSL_LIBRARIES="${CONDA_PREFIX}/Library/lib"
            # Add OpenSSL bin directory to PATH for DLLs
            export PATH="${CONDA_PREFIX}/Library/bin:$PATH"
          else
            export OPENSSL_ROOT_DIR="${CONDA_PREFIX}"
            export OPENSSL_INCLUDE_DIR="${CONDA_PREFIX}/include"
            export OPENSSL_LIBRARIES="${CONDA_PREFIX}/lib"
          fi
          
          # Set platform-specific build flags
          if [[ "$OSTYPE" == "msys" || "$OSTYPE" == "win32" ]]; then
            # Windows-specific build flags
            export CFLAGS="-I${OPENSSL_INCLUDE_DIR} -I${GDAL_INCLUDE}"
            export CXXFLAGS="-I${OPENSSL_INCLUDE_DIR} -I${GDAL_INCLUDE}"
            export LDFLAGS="-L${OPENSSL_LIBRARIES} -L${GDAL_LIB}"
            
            # Set additional Windows environment variables
            export VCPKG_INSTALLATION_ROOT="/c/vcpkg"
            export WindowsSdkDir="C:\\Program Files (x86)\\Windows Kits\\10\\"
            export WindowsSDKVersion="10.0.19041.0"
            
            # Add MSVC compiler to PATH
            export PATH="/c/Program Files/Microsoft Visual Studio/2022/Enterprise/VC/Tools/MSVC/14.35.32215/bin/Hostx64/x64:$PATH"
          else
            # Unix-specific build flags
            export CFLAGS="-I${OPENSSL_INCLUDE_DIR} -I${GDAL_INCLUDE}"
            export CXXFLAGS="-I${OPENSSL_INCLUDE_DIR} -I${GDAL_INCLUDE}"
            export LDFLAGS="-L${OPENSSL_LIBRARIES} -L${GDAL_LIB}"
          fi
          
          # Print environment variables for debugging
          echo "GDAL_HOME: $GDAL_HOME"
          echo "CMAKE_PREFIX_PATH: $CMAKE_PREFIX_PATH"
          echo "GDAL_LIBRARY_PATH: $GDAL_LIB"
          echo "GDAL_INCLUDE_PATH: $GDAL_INCLUDE"
          echo "GDAL_DATA: $GDAL_SHARE"
          echo "PROJ_LIB: $PROJ_SHARE"
          echo "GDAL_DRIVER_PATH: $GDAL_PLUGINS"
          echo "OPENSSL_ROOT_DIR: $OPENSSL_ROOT_DIR"
          echo "OPENSSL_INCLUDE_DIR: $OPENSSL_INCLUDE_DIR"
          echo "OPENSSL_LIBRARIES: $OPENSSL_LIBRARIES"
          echo "CFLAGS: $CFLAGS"
          echo "CXXFLAGS: $CXXFLAGS"
          echo "LDFLAGS: $LDFLAGS"
          
          # Run setup.py to build the GDAL Python bindings
          python setup.py build_ext --inplace
          
          # Run cibuildwheel with explicit environment variables
          CIBW_ENVIRONMENT="GDAL_HOME='${GDAL_HOME}' CMAKE_PREFIX_PATH='${CMAKE_PREFIX_PATH}' GDAL_LIBRARY_PATH='${GDAL_LIB}' GDAL_INCLUDE_PATH='${GDAL_INCLUDE}' GDAL_DATA='${GDAL_SHARE}' PROJ_LIB='${PROJ_SHARE}' GDAL_DRIVER_PATH='${GDAL_PLUGINS}' OPENSSL_ROOT_DIR='${OPENSSL_ROOT_DIR}' OPENSSL_INCLUDE_DIR='${OPENSSL_INCLUDE_DIR}' OPENSSL_LIBRARIES='${OPENSSL_LIBRARIES}' CFLAGS='${CFLAGS}' CXXFLAGS='${CXXFLAGS}' LDFLAGS='${LDFLAGS}'" \
          CIBW_BEFORE_BUILD="pip install numpy" \
          CIBW_REPAIR_WHEEL_COMMAND="" \
          CIBW_TEST_REQUIRES="pytest" \
          CIBW_TEST_COMMAND="cd {package} && pytest -xvs" \
          CIBW_BUILD="${{ steps.cibw-build.outputs.cibw_build }}" \
          python -m cibuildwheel --output-dir wheelhouse
          
          # Create wheelhouse directory if it doesn't exist
          mkdir -p wheelhouse
          
          # If no wheel was created, copy the built extensions to create a wheel manually
          if [ ! -f wheelhouse/*.whl ]; then
            echo "No wheel file found. Creating a wheel manually..."
            
            # Create a dist directory
            mkdir -p dist
            
            # Build a wheel using setuptools
            python setup.py bdist_wheel
            
            # Copy the wheel to the wheelhouse directory
            cp -v dist/*.whl wheelhouse/
          fi
          
          # Verify the wheel file size
          cd wheelhouse
          echo "Checking wheel file size..."
          ls -lh *.whl || echo "No wheel files found"
          
          # Verify the wheel file size is at least 30MB
          WHEEL_SIZE=$(du -k *.whl 2>/dev/null | awk '{print $1}' || echo "0")
          echo "Wheel size: ${WHEEL_SIZE}KB"
          if [ "${WHEEL_SIZE}" -lt 30000 ]; then
            echo "Error: Wheel file size is less than 30MB. The build may be incomplete."
            exit 1
          else
            echo "Wheel file size check passed: ${WHEEL_SIZE}KB (>= 30MB)"
          fi

      - name: Upload wheels as artifacts
        uses: actions/upload-artifact@v4
        with:
          name: wheels-micromamba-python${{ github.event.inputs.python_version || '3.11' }}
          path: gdal-source/wheelhouse/*.whl
          if-no-files-found: error

  create_release:
    name: Create GitHub Release
    needs: [build_wheels]
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && startsWith(github.ref, 'refs/tags/v')
    
    steps:
      - name: Get version from tag
        id: get_version
        run: echo "VERSION=${GITHUB_REF#refs/tags/v}" >> $GITHUB_OUTPUT
      
      - name: Create Release
        id: create_release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ github.ref }}
          name: GDAL Wheels Release ${{ steps.get_version.outputs.VERSION }}
          draft: false
          prerelease: false
          generate_release_notes: true
          
      - uses: actions/download-artifact@v4
        with:
          pattern: wheels-*
          path: dist
          merge-multiple: true
          
      - name: Upload Release Assets
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ github.ref }}
          files: dist/*.whl
