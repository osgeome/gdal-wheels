name: Build GDAL Wheels (Simple)

on:
  push:
    tags:
      - 'v*'
  pull_request:
    branches: [main]
  workflow_dispatch:
    inputs:
      python_version:
        description: 'Python version to build for (default: 3.11)'
        required: false
        default: '3.11'
        type: string
      gdal_version:
        description: 'GDAL version to build (default: latest released)'
        required: false
        default: 'v3.10.2'
        type: string

env:
  GDAL_VERSION: ${{ github.event.inputs.gdal_version || 'v3.10.2' }}

jobs:
  build_wheels:
    name: Build wheels for Python ${{ github.event.inputs.python_version || '3.11' }}
    runs-on: windows-latest
    timeout-minutes: 60

    steps:
      - name: Checkout wheels repository
        uses: actions/checkout@v4
        with:
          path: gdal-wheels

      - name: Configure Git for long paths on Windows
        run: |
          git config --system core.longpaths true

      - name: Checkout GDAL source
        uses: actions/checkout@v4
        with:
          repository: OSGeo/gdal
          ref: ${{ env.GDAL_VERSION }}
          path: gdal-source
          fetch-depth: 0
          submodules: recursive

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ github.event.inputs.python_version || '3.11' }}
          cache: pip

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          python -m pip install numpy setuptools wheel build cibuildwheel

      - name: Remove conflicting libraries
        run: |
          rm -rf C:/Strawberry || true

      - name: Install GDAL dependencies
        run: |
          choco install -y vcpkg
          vcpkg install proj sqlite3 curl tiff libpng jpeg zlib openssl --triplet=x64-windows
          echo "VCPKG_ROOT=C:/vcpkg" >> $GITHUB_ENV

      - name: Set up Visual Studio environment
        shell: cmd
        run: |
          call "C:\Program Files\Microsoft Visual Studio\2022\Enterprise\Common7\Tools\VsDevCmd.bat" -arch=amd64
          echo PATH=%PATH%>> %GITHUB_ENV%
          echo INCLUDE=%INCLUDE%>> %GITHUB_ENV%
          echo LIB=%LIB%>> %GITHUB_ENV%
          echo LIBPATH=%LIBPATH%>> %GITHUB_ENV%

      - name: Build GDAL and wheel
        shell: cmd
        env:
          GDAL_SOURCE: D:/a/gdal-wheels/gdal-wheels/gdal-source
          GDAL_HOME: D:/a/gdal-wheels/gdal-wheels/gdal-source/install
          PYTHON_VERSION: ${{ github.event.inputs.python_version || '3.11' }}
        run: |
          cd gdal-wheels
          python build_wheels.py

      - name: Upload wheels as artifacts
        uses: actions/upload-artifact@v4
        with:
          name: wheels-simple-python${{ github.event.inputs.python_version || '3.11' }}
          path: gdal-wheels/wheelhouse/*.whl
          if-no-files-found: error

  create_release:
    name: Create GitHub Release
    needs: [build_wheels]
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && startsWith(github.ref, 'refs/tags/v')
    
    steps:
      - name: Get version from tag
        id: get_version
        run: echo "VERSION=${GITHUB_REF#refs/tags/v}" >> $GITHUB_OUTPUT
      
      - name: Create Release
        id: create_release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ github.ref }}
          name: GDAL Wheels Release ${{ steps.get_version.outputs.VERSION }}
          draft: false
          prerelease: false
          generate_release_notes: true
          
      - uses: actions/download-artifact@v4
        with:
          pattern: wheels-*
          path: dist
          merge-multiple: true
          
      - name: Upload Release Assets
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ github.ref }}
          files: dist/*.whl
